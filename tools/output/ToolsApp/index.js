// Generated by purs version 0.15.15
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Random from "../Effect.Random/index.js";
import * as Flame_Html_Attribute_Internal from "../Flame.Html.Attribute.Internal/index.js";
import * as Flame_Html_Element from "../Flame.Html.Element/index.js";
import * as Flame_Html_Event from "../Flame.Html.Event/index.js";
var toNodeArray = /* #__PURE__ */ Flame_Html_Element.toNodeArray(Flame_Html_Element.toNodeHtmlHtml);
var article_ = /* #__PURE__ */ Flame_Html_Element.article_(toNodeArray);
var nav_ = /* #__PURE__ */ Flame_Html_Element.nav_(toNodeArray);
var toNodeArray1 = /* #__PURE__ */ Flame_Html_Element.toNodeArray(Flame_Html_Element.toNodeNodeDataNodeData);
var div = /* #__PURE__ */ Flame_Html_Element.div(toNodeArray1)(toNodeArray);
var class$prime = /* #__PURE__ */ Flame_Html_Attribute_Internal["class$prime"](Flame_Html_Attribute_Internal.toClassListString);
var button = /* #__PURE__ */ Flame_Html_Element.button(toNodeArray1)(toNodeArray);
var i_ = /* #__PURE__ */ Flame_Html_Element.i_(toNodeArray);
var max = /* #__PURE__ */ Data_Ord.max(Data_Ord.ordInt);
var min = /* #__PURE__ */ Data_Ord.min(Data_Ord.ordInt);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var div_ = /* #__PURE__ */ Flame_Html_Element.div_(toNodeArray);
var input = /* #__PURE__ */ Flame_Html_Element.input(toNodeArray1);
var span = /* #__PURE__ */ Flame_Html_Element.span(toNodeArray1)(toNodeArray);
var label = /* #__PURE__ */ Flame_Html_Element.label(toNodeArray1)(toNodeArray);
var span_ = /* #__PURE__ */ Flame_Html_Element.span_(toNodeArray);
var eqRec = /* #__PURE__ */ Data_Eq.eqRec()(/* #__PURE__ */ Data_Eq.eqRowCons(/* #__PURE__ */ Data_Eq.eqRowCons(/* #__PURE__ */ Data_Eq.eqRowCons(/* #__PURE__ */ Data_Eq.eqRowCons(/* #__PURE__ */ Data_Eq.eqRowCons(/* #__PURE__ */ Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "targetDC";
    }
})(Data_Eq.eqInt))()({
    reflectSymbol: function () {
        return "saveRoll";
    }
})(/* #__PURE__ */ Data_Eq.eqArray(Data_Eq.eqInt)))()({
    reflectSymbol: function () {
        return "saveBonus";
    }
})(Data_Eq.eqInt))()({
    reflectSymbol: function () {
        return "disadvantage";
    }
})(Data_Eq.eqBoolean))()({
    reflectSymbol: function () {
        return "description";
    }
})(Data_Eq.eqString))()({
    reflectSymbol: function () {
        return "advantage";
    }
})(Data_Eq.eqBoolean));
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var map = /* #__PURE__ */ Data_Functor.map(Effect_Aff.functorAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var $$delete = /* #__PURE__ */ Data_Array["delete"](eqRec);
var nav = /* #__PURE__ */ Flame_Html_Element.nav(toNodeArray1)(toNodeArray);
var main = /* #__PURE__ */ Flame_Html_Element.main(toNodeArray1)(toNodeArray);
var header = /* #__PURE__ */ Flame_Html_Element.header(toNodeArray1)(toNodeArray);
var h6 = /* #__PURE__ */ Flame_Html_Element.h6(toNodeArray1)(toNodeArray);
var div_1 = /* #__PURE__ */ Flame_Html_Element.div_(/* #__PURE__ */ Flame_Html_Element.toNodeArray(toNodeArray));
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var Update = /* #__PURE__ */ (function () {
    function Update(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Update.create = function (value0) {
        return function (value1) {
            return new Update(value0, value1);
        };
    };
    return Update;
})();
var Description = /* #__PURE__ */ (function () {
    function Description(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Description.create = function (value0) {
        return function (value1) {
            return new Description(value0, value1);
        };
    };
    return Description;
})();
var Bonus = /* #__PURE__ */ (function () {
    function Bonus(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Bonus.create = function (value0) {
        return function (value1) {
            return new Bonus(value0, value1);
        };
    };
    return Bonus;
})();
var DC = /* #__PURE__ */ (function () {
    function DC(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DC.create = function (value0) {
        return function (value1) {
            return new DC(value0, value1);
        };
    };
    return DC;
})();
var Roll = /* #__PURE__ */ (function () {
    function Roll(value0) {
        this.value0 = value0;
    };
    Roll.create = function (value0) {
        return new Roll(value0);
    };
    return Roll;
})();
var Remove = /* #__PURE__ */ (function () {
    function Remove(value0) {
        this.value0 = value0;
    };
    Remove.create = function (value0) {
        return new Remove(value0);
    };
    return Remove;
})();
var Advantage = /* #__PURE__ */ (function () {
    function Advantage(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Advantage.create = function (value0) {
        return function (value1) {
            return new Advantage(value0, value1);
        };
    };
    return Advantage;
})();
var Disadvantage = /* #__PURE__ */ (function () {
    function Disadvantage(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Disadvantage.create = function (value0) {
        return function (value1) {
            return new Disadvantage(value0, value1);
        };
    };
    return Disadvantage;
})();
var Add = /* #__PURE__ */ (function () {
    function Add() {

    };
    Add.value = new Add();
    return Add;
})();
var D4 = /* #__PURE__ */ (function () {
    function D4() {

    };
    D4.value = new D4();
    return D4;
})();
var D6 = /* #__PURE__ */ (function () {
    function D6() {

    };
    D6.value = new D6();
    return D6;
})();
var D8 = /* #__PURE__ */ (function () {
    function D8() {

    };
    D8.value = new D8();
    return D8;
})();
var D10 = /* #__PURE__ */ (function () {
    function D10() {

    };
    D10.value = new D10();
    return D10;
})();
var D12 = /* #__PURE__ */ (function () {
    function D12() {

    };
    D12.value = new D12();
    return D12;
})();
var D20 = /* #__PURE__ */ (function () {
    function D20() {

    };
    D20.value = new D20();
    return D20;
})();
var Acid = /* #__PURE__ */ (function () {
    function Acid() {

    };
    Acid.value = new Acid();
    return Acid;
})();
var Bludgeoning = /* #__PURE__ */ (function () {
    function Bludgeoning() {

    };
    Bludgeoning.value = new Bludgeoning();
    return Bludgeoning;
})();
var Cold = /* #__PURE__ */ (function () {
    function Cold() {

    };
    Cold.value = new Cold();
    return Cold;
})();
var Fire = /* #__PURE__ */ (function () {
    function Fire() {

    };
    Fire.value = new Fire();
    return Fire;
})();
var Force = /* #__PURE__ */ (function () {
    function Force() {

    };
    Force.value = new Force();
    return Force;
})();
var Lightning = /* #__PURE__ */ (function () {
    function Lightning() {

    };
    Lightning.value = new Lightning();
    return Lightning;
})();
var Necrotic = /* #__PURE__ */ (function () {
    function Necrotic() {

    };
    Necrotic.value = new Necrotic();
    return Necrotic;
})();
var Piercing = /* #__PURE__ */ (function () {
    function Piercing() {

    };
    Piercing.value = new Piercing();
    return Piercing;
})();
var Poison = /* #__PURE__ */ (function () {
    function Poison() {

    };
    Poison.value = new Poison();
    return Poison;
})();
var Psychic = /* #__PURE__ */ (function () {
    function Psychic() {

    };
    Psychic.value = new Psychic();
    return Psychic;
})();
var Radiant = /* #__PURE__ */ (function () {
    function Radiant() {

    };
    Radiant.value = new Radiant();
    return Radiant;
})();
var Slashing = /* #__PURE__ */ (function () {
    function Slashing() {

    };
    Slashing.value = new Slashing();
    return Slashing;
})();
var Thunder = /* #__PURE__ */ (function () {
    function Thunder() {

    };
    Thunder.value = new Thunder();
    return Thunder;
})();
var AddAttackRoll = /* #__PURE__ */ (function () {
    function AddAttackRoll() {

    };
    AddAttackRoll.value = new AddAttackRoll();
    return AddAttackRoll;
})();
var RemoveAttackRoll = /* #__PURE__ */ (function () {
    function RemoveAttackRoll(value0) {
        this.value0 = value0;
    };
    RemoveAttackRoll.create = function (value0) {
        return new RemoveAttackRoll(value0);
    };
    return RemoveAttackRoll;
})();
var RollAttackRoll = /* #__PURE__ */ (function () {
    function RollAttackRoll(value0) {
        this.value0 = value0;
    };
    RollAttackRoll.create = function (value0) {
        return new RollAttackRoll(value0);
    };
    return RollAttackRoll;
})();
var Save = /* #__PURE__ */ (function () {
    function Save(value0) {
        this.value0 = value0;
    };
    Save.create = function (value0) {
        return new Save(value0);
    };
    return Save;
})();
var viewAttackRoll = function (attack) {
    return article_([ nav_([ Flame_Html_Element.text("Attack Roll:"), div([ class$prime("max") ])([ Flame_Html_Element.text("") ]), button([ class$prime("square round extra"), Flame_Html_Event.onClick(new RemoveAttackRoll(attack)) ])([ i_([ Flame_Html_Element.text("delete") ]) ]) ]) ]);
};
var updateArray = function (dictEq) {
    var eq2 = Data_Eq.eq(dictEq);
    return function (arr) {
        return function (item) {
            return function (newItem) {
                var v = Data_Array.findIndex(function (x) {
                    return eq2(x)(item);
                })(arr);
                if (v instanceof Data_Maybe.Nothing) {
                    return arr;
                };
                if (v instanceof Data_Maybe.Just) {
                    var v1 = Data_Array.updateAt(v.value0)(newItem)(arr);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return arr;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return v1.value0;
                    };
                    throw new Error("Failed pattern match at ToolsApp (line 147, column 17 - line 149, column 28): " + [ v1.constructor.name ]);
                };
                throw new Error("Failed pattern match at ToolsApp (line 145, column 3 - line 149, column 28): " + [ v.constructor.name ]);
            };
        };
    };
};
var updateArray1 = /* #__PURE__ */ updateArray(eqRec);
var saveRoll = function (save) {
    if (save.saveRoll.length === 2) {
        var $102 = [ save.advantage, save.disadvantage ];
        if ($102.length === 2 && ($102[0] && !$102[1])) {
            return max(save["saveRoll"][0])(save["saveRoll"][1]);
        };
        if ($102.length === 2 && (!$102[0] && $102[1])) {
            return min(save["saveRoll"][0])(save["saveRoll"][1]);
        };
        return save["saveRoll"][0];
    };
    return 0;
};
var saveLine2 = function (save) {
    var $109 = save.targetDC === 0;
    if ($109) {
        return Data_Maybe.Nothing.value;
    };
    var $110 = (saveRoll(save) + save.saveBonus | 0) >= save.targetDC;
    if ($110) {
        return new Data_Maybe.Just(div([ class$prime("primary") ])([ Flame_Html_Element.text("Target DC: " + (show(save.targetDC) + (", " + "Success!"))) ]));
    };
    return new Data_Maybe.Just(div([ class$prime("error") ])([ Flame_Html_Element.text("Target DC: " + (show(save.targetDC) + (", " + "Failure!"))) ]));
};
var saveLine1 = function (save) {
    if (save.saveRoll.length === 2) {
        var $112 = save.advantage === save.disadvantage;
        if ($112) {
            return "Roll [" + (show(save["saveRoll"][0]) + ("] + Bonus [" + (show(save.saveBonus) + ("] = " + show(saveRoll(save) + save.saveBonus | 0)))));
        };
        return "Roll [" + (show(save["saveRoll"][0]) + ("," + (show(save["saveRoll"][1]) + ("] + Bonus [" + (show(save.saveBonus) + ("] = " + show(saveRoll(save) + save.saveBonus | 0)))))));
    };
    return "-";
};
var showSaveResult = function (save) {
    var v = saveLine2(save);
    if (v instanceof Data_Maybe.Nothing) {
        return div_([ Flame_Html_Element.text(saveLine1(save)) ]);
    };
    if (v instanceof Data_Maybe.Just) {
        return div_([ div_([ Flame_Html_Element.text(saveLine1(save)) ]), v.value0 ]);
    };
    throw new Error("Failed pattern match at ToolsApp (line 210, column 3 - line 216, column 8): " + [ v.constructor.name ]);
};
var rollDice = function (v) {
    if (v instanceof D4) {
        return Effect_Random.randomInt(1)(4);
    };
    if (v instanceof D6) {
        return Effect_Random.randomInt(1)(6);
    };
    if (v instanceof D8) {
        return Effect_Random.randomInt(1)(8);
    };
    if (v instanceof D10) {
        return Effect_Random.randomInt(1)(10);
    };
    if (v instanceof D12) {
        return Effect_Random.randomInt(1)(12);
    };
    if (v instanceof D20) {
        return Effect_Random.randomInt(1)(20);
    };
    throw new Error("Failed pattern match at ToolsApp (line 82, column 1 - line 82, column 35): " + [ v.constructor.name ]);
};
var rollSave = function (save) {
    return function __do() {
        var a = rollDice(D20.value)();
        var b = rollDice(D20.value)();
        var roll = [ a, b ];
        return {
            advantage: save.advantage,
            description: save.description,
            disadvantage: save.disadvantage,
            saveBonus: save.saveBonus,
            targetDC: save.targetDC,
            saveRoll: roll
        };
    };
};
var mkText = function (caption) {
    return function (msg) {
        return function (value) {
            return div([ class$prime("field border") ])([ input([ Flame_Html_Attribute_Internal["type$prime"]("text"), Flame_Html_Attribute_Internal.value(value), Flame_Html_Event.onInput(msg) ]), span([ class$prime("helper") ])([ Flame_Html_Element.text(caption) ]) ]);
        };
    };
};
var mkCheckbox = function (caption) {
    return function (icon) {
        return function (msg) {
            return function (value) {
                return label([ class$prime("switch icon") ])([ input([ Flame_Html_Attribute_Internal["type$prime"]("checkbox"), Flame_Html_Attribute_Internal.checked(value), Flame_Html_Event.onCheck(msg) ]), span_([ i_([ Flame_Html_Element.text(icon) ]) ]), div([ class$prime("tooltip") ])([ Flame_Html_Element.text(caption) ]) ]);
            };
        };
    };
};
var mkButton = function (msg) {
    return function (icon) {
        return button([ class$prime("square round extra"), Flame_Html_Event.onClick(msg) ])([ i_([ Flame_Html_Element.text(icon) ]) ]);
    };
};
var initSave = {
    description: "",
    advantage: false,
    disadvantage: false,
    saveBonus: 0,
    saveRoll: [  ],
    targetDC: 0
};
var updateSave = function (v) {
    return function (v1) {
        if (v1 instanceof Update) {
            return new Data_Tuple.Tuple({
                attackRolls: v.attackRolls,
                savingThrows: updateArray1(v.savingThrows)(v1.value0)(v1.value1)
            }, [  ]);
        };
        if (v1 instanceof Description) {
            return new Data_Tuple.Tuple(v, [ pure1(new Data_Maybe.Just(new Save(new Update(v1.value0, {
                advantage: v1.value0.advantage,
                disadvantage: v1.value0.disadvantage,
                saveBonus: v1.value0.saveBonus,
                saveRoll: v1.value0.saveRoll,
                targetDC: v1.value0.targetDC,
                description: v1.value1
            })))) ]);
        };
        if (v1 instanceof Bonus) {
            return new Data_Tuple.Tuple(v, [ pure1(new Data_Maybe.Just(new Save(new Update(v1.value0, {
                description: v1.value0.description,
                advantage: v1.value0.advantage,
                disadvantage: v1.value0.disadvantage,
                saveRoll: v1.value0.saveRoll,
                targetDC: v1.value0.targetDC,
                saveBonus: v1.value1
            })))) ]);
        };
        if (v1 instanceof DC) {
            return new Data_Tuple.Tuple(v, [ pure1(new Data_Maybe.Just(new Save(new Update(v1.value0, {
                description: v1.value0.description,
                advantage: v1.value0.advantage,
                disadvantage: v1.value0.disadvantage,
                saveBonus: v1.value0.saveBonus,
                saveRoll: v1.value0.saveRoll,
                targetDC: v1.value1
            })))) ]);
        };
        if (v1 instanceof Advantage) {
            return new Data_Tuple.Tuple(v, [ pure1(new Data_Maybe.Just(new Save(new Update(v1.value0, {
                description: v1.value0.description,
                disadvantage: v1.value0.disadvantage,
                saveBonus: v1.value0.saveBonus,
                saveRoll: v1.value0.saveRoll,
                targetDC: v1.value0.targetDC,
                advantage: v1.value1
            })))) ]);
        };
        if (v1 instanceof Disadvantage) {
            return new Data_Tuple.Tuple(v, [ pure1(new Data_Maybe.Just(new Save(new Update(v1.value0, {
                description: v1.value0.description,
                advantage: v1.value0.advantage,
                saveBonus: v1.value0.saveBonus,
                saveRoll: v1.value0.saveRoll,
                targetDC: v1.value0.targetDC,
                disadvantage: v1.value1
            })))) ]);
        };
        if (v1 instanceof Roll) {
            return new Data_Tuple.Tuple(v, [ map(function ($139) {
                return Data_Maybe.Just.create(Save.create($139));
            })(map(Update.create(v1.value0))(liftEffect(rollSave(v1.value0)))) ]);
        };
        if (v1 instanceof Remove) {
            return new Data_Tuple.Tuple({
                attackRolls: v.attackRolls,
                savingThrows: $$delete(v1.value0)(v.savingThrows)
            }, [  ]);
        };
        if (v1 instanceof Add) {
            return new Data_Tuple.Tuple({
                attackRolls: v.attackRolls,
                savingThrows: Data_Array.snoc(v.savingThrows)(initSave)
            }, [  ]);
        };
        throw new Error("Failed pattern match at ToolsApp (line 106, column 1 - line 106, column 75): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var update = function (v) {
    return function (v1) {
        if (v1 instanceof Save) {
            return updateSave(v)(v1.value0);
        };
        return new Data_Tuple.Tuple(v, [  ]);
    };
};
var init = /* #__PURE__ */ (function () {
    return new Data_Tuple.Tuple({
        attackRolls: [ {
            attackBonus: 5,
            advantage: false,
            disadvantage: false,
            damageCount: 0,
            description: "Guantlet GFB",
            targetAC: 10,
            attackRoll: 0,
            damageDice: [ {
                diceType: D8.value,
                diceCount: 1,
                damageBonus: 7,
                damageRoll: 0,
                damageType: Thunder.value
            }, {
                diceType: D4.value,
                diceCount: 1,
                damageBonus: 0,
                damageRoll: 0,
                damageType: Acid.value
            }, {
                diceType: D8.value,
                diceCount: 2,
                damageBonus: 10,
                damageRoll: 0,
                damageType: Fire.value
            } ]
        } ],
        savingThrows: [ {
            advantage: false,
            disadvantage: false,
            saveBonus: 0,
            saveRoll: [  ],
            targetDC: 0,
            description: "STR Save"
        }, {
            advantage: false,
            disadvantage: false,
            saveBonus: 10,
            saveRoll: [  ],
            targetDC: 0,
            description: "INT Save"
        } ]
    }, [  ]);
})();
var fromStr = function (s) {
    var v = Data_Int.fromString(s);
    if (v instanceof Data_Maybe.Nothing) {
        return 0;
    };
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    throw new Error("Failed pattern match at ToolsApp (line 261, column 3 - line 263, column 17): " + [ v.constructor.name ]);
};
var mkNumber = function (caption) {
    return function (msg) {
        return function (value) {
            return div([ class$prime("field border") ])([ input([ Flame_Html_Attribute_Internal["type$prime"]("number"), Flame_Html_Attribute_Internal.value(show(value)), Flame_Html_Event.onInput(function (x) {
                return msg(fromStr(x));
            }) ]), span([ class$prime("helper") ])([ Flame_Html_Element.text(caption) ]) ]);
        };
    };
};
var viewSavingThrow = function (save) {
    return article_([ nav([ class$prime("grid") ])([ div([ class$prime("s2") ])([ mkText("Description")(function (s) {
        return new Save(new Description(save, s));
    })(save.description) ]), div([ class$prime("s2") ])([ mkNumber("Save Bonus")(function (b) {
        return new Save(new Bonus(save, b));
    })(save.saveBonus) ]), div([ class$prime("s1") ])([ mkCheckbox("Advantage")("arrow_upward")(function (b) {
        return new Save(new Advantage(save, b));
    })(save.advantage), mkCheckbox("Disadvantage")("arrow_downward")(function (b) {
        return new Save(new Disadvantage(save, b));
    })(save.disadvantage) ]), div([ class$prime("s2") ])([ mkNumber("Target DC")(function (d) {
        return new Save(new DC(save, d));
    })(save.targetDC) ]), div([ class$prime("s1") ])([ mkButton(new Save(new Roll(save)))("Casino") ]), div([ class$prime("s3") ])([ showSaveResult(save) ]), div([ class$prime("s1") ])([ mkButton(new Save(new Remove(save)))("delete") ]) ]) ]);
};
var view = function (model) {
    return main([ class$prime("responsive") ])([ div_([ header([ class$prime("fill") ])([ nav_([ h6([ class$prime("max left-align") ])([ Flame_Html_Element.text("Attack Rolls") ]), div([ class$prime("max") ])([ Flame_Html_Element.text("") ]), button([ class$prime("square round extra"), Flame_Html_Event.onClick(AddAttackRoll.value) ])([ i_([ Flame_Html_Element.text("add") ]) ]) ]) ]), div_1([ map1(viewAttackRoll)(model.attackRolls) ]), Flame_Html_Element.br, header([ class$prime("fill") ])([ nav_([ h6([ class$prime("max left-align") ])([ Flame_Html_Element.text("Saving Throws") ]), div([ class$prime("max") ])([ Flame_Html_Element.text("") ]), button([ class$prime("square round extra"), Flame_Html_Event.onClick(new Save(Add.value)) ])([ i_([ Flame_Html_Element.text("add") ]) ]) ]) ]), div_1([ map1(viewSavingThrow)(model.savingThrows) ]) ]) ]);
};
export {
    AddAttackRoll,
    RemoveAttackRoll,
    RollAttackRoll,
    Save,
    init,
    update,
    view
};
