// Generated by purs version 0.15.15
import * as $foreign from "./foreign.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_String_Regex from "../Data.String.Regex/index.js";
import * as Data_String_Regex_Flags from "../Data.String.Regex.Flags/index.js";
import * as Data_String_Regex_Unsafe from "../Data.String.Regex.Unsafe/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Flame_Application_Internal_Dom from "../Flame.Application.Internal.Dom/index.js";
import * as Flame_Html_Attribute_Internal from "../Flame.Html.Attribute.Internal/index.js";
import * as Flame_Html_Element from "../Flame.Html.Element/index.js";
import * as Flame_Renderer_String from "../Flame.Renderer.String/index.js";
import * as Flame_Serialization from "../Flame.Serialization/index.js";
var toNodeArray = /* #__PURE__ */ Flame_Html_Element.toNodeArray(Flame_Html_Element.toNodeNodeDataNodeData);
var style = /* #__PURE__ */ Flame_Html_Attribute_Internal.style(/* #__PURE__ */ Flame_Html_Attribute_Internal.toStyleListRecord());
var tagSerializedState = "template-state";
var onlyLetters = /* #__PURE__ */ Data_String_Regex.replace(/* #__PURE__ */ Data_String_Regex_Unsafe.unsafeRegex("[^aA-zZ]")(Data_String_Regex_Flags.global))("");
var idSerializedState = function (v) {
    return "pre-mount-" + v;
};
var attributeSerializedState = function (v) {
    return "__pre-mount-" + v;
};
var preMount = function (dictSerializeState) {
    var serialize = Flame_Serialization.serialize(dictSerializeState);
    return function (v) {
        return function (application) {
            var sanitizedSelector = onlyLetters(v);
            var state = Flame_Html_Element.createElement(tagSerializedState)(toNodeArray)(Flame_Html_Element.toNodeStringHtml)([ style({
                display: "none"
            }), Flame_Html_Attribute_Internal.id(idSerializedState(sanitizedSelector)), Flame_Html_Attribute_Internal.createAttribute(attributeSerializedState(sanitizedSelector))(sanitizedSelector) ])(serialize(application.init));
            var html = $foreign.injectState(state)(application.view(application.init));
            return Flame_Renderer_String.render(html);
        };
    };
};
var selectorSerializedState = function (selector) {
    return tagSerializedState + ("#" + (idSerializedState(selector) + ("[" + (attributeSerializedState(selector) + ("=" + (selector + "]"))))));
};
var serializedState = function (dictUnserializeState) {
    var unserialize = Flame_Serialization.unserialize(dictUnserializeState);
    return function (selector) {
        var stateSelector = selectorSerializedState(onlyLetters(selector));
        return function __do() {
            var maybeElement = Flame_Application_Internal_Dom.querySelector(stateSelector)();
            if (maybeElement instanceof Data_Maybe.Just) {
                var contents = Flame_Application_Internal_Dom.textContent(maybeElement.value0)();
                var v = unserialize(contents);
                if (v instanceof Data_Either.Right) {
                    Flame_Application_Internal_Dom.removeElement(stateSelector)();
                    return v.value0;
                };
                if (v instanceof Data_Either.Left) {
                    return Effect_Exception["throw"]("Error resuming application mount: serialized state is invalid! " + v.value0)();
                };
                throw new Error("Failed pattern match at Flame.Application.Internal.PreMount (line 43, column 19 - line 47, column 127): " + [ v.constructor.name ]);
            };
            if (maybeElement instanceof Data_Maybe.Nothing) {
                return Effect_Exception["throw"]("Error resuming application mount: serialized state (" + (stateSelector + ") not found!"))();
            };
            throw new Error("Failed pattern match at Flame.Application.Internal.PreMount (line 40, column 7 - line 48, column 123): " + [ maybeElement.constructor.name ]);
        };
    };
};
export {
    injectState
} from "./foreign.js";
export {
    tagSerializedState,
    idSerializedState,
    attributeSerializedState,
    onlyLetters,
    selectorSerializedState,
    serializedState,
    preMount
};
