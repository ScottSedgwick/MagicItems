// Generated by purs version 0.15.15
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_State_Trans from "../Control.Monad.State.Trans/index.js";
import * as Control_Monad_Writer_Trans from "../Control.Monad.Writer.Trans/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_String_Regex from "../Data.String.Regex/index.js";
import * as Data_String_Regex_Flags from "../Data.String.Regex.Flags/index.js";
import * as Data_String_Regex_Unsafe from "../Data.String.Regex.Unsafe/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Test_Spec_Console from "../Test.Spec.Console/index.js";
import * as Test_Spec_Reporter_Base from "../Test.Spec.Reporter.Base/index.js";
import * as Test_Spec_Result from "../Test.Spec.Result/index.js";
import * as Test_Spec_Runner_Event from "../Test.Spec.Runner.Event/index.js";
import * as Test_Spec_Tree from "../Test.Spec.Tree/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var intercalate = /* #__PURE__ */ Data_Array.intercalate(Data_Monoid.monoidString);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Functor.functorArray);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var mapFlipped1 = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Maybe.functorMaybe);
var tellLn = /* #__PURE__ */ Test_Spec_Console.tellLn(/* #__PURE__ */ Control_Monad_State_Trans.monadWriterStateT(/* #__PURE__ */ Control_Monad_Writer_Trans.monadWriterWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)));
var monadWriterT = /* #__PURE__ */ Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(/* #__PURE__ */ Control_Monad_State_Trans.bindStateT(monadWriterT));
var show1 = /* #__PURE__ */ Data_Show.show(Effect_Exception.showError);
var pure = /* #__PURE__ */ Control_Applicative.pure(/* #__PURE__ */ Control_Monad_State_Trans.applicativeStateT(monadWriterT));
var withMessage = function (message) {
    return function (v) {
        return {
            name: v.name,
            nodeId: v.nodeId,
            parentNodeId: v.parentNodeId,
            message: message
        };
    };
};
var withDuration = function (duration) {
    return function (v) {
        return {
            name: v.name,
            nodeId: v.nodeId,
            parentNodeId: v.parentNodeId,
            duration: duration
        };
    };
};
var testCount = function (count) {
    return "##teamcity[testCount count='" + (show(count) + "']");
};
var idFromPath = function (path) {
    return intercalate(",")(mapFlipped(mapFlipped(path)(unwrap))(function (v) {
        return show(v.index) + (":" + Data_Maybe.fromMaybe("")(v.name));
    }));
};
var serviceMessage = function (v) {
    var parentNodeId = mapFlipped1(mapFlipped1(Test_Spec_Tree.parentSuite(v.value0))(Data_Tuple.fst))(idFromPath);
    var nodeId = idFromPath(v.value0);
    return {
        name: v.value1,
        nodeId: nodeId,
        parentNodeId: parentNodeId
    };
};
var $$escape = /* #__PURE__ */ Data_String_Regex["replace$prime"](/* #__PURE__ */ Data_String_Regex_Unsafe.unsafeRegex("(?:[|\x0a\x0d'\\[\\]])")(Data_String_Regex_Flags.global))(function (match) {
    return function (v) {
        if (match === "|") {
            return "||";
        };
        if (match === "\x0a") {
            return "|n";
        };
        if (match === "\x0d") {
            return "|r";
        };
        if (match === "[") {
            return "|[";
        };
        if (match === "]") {
            return "|]";
        };
        if (match === "'") {
            return "|'";
        };
        return "";
    };
});
var property = function (key) {
    return function (value) {
        return " " + (key + ("='" + ($$escape(value) + "'")));
    };
};
var teamcity$prime = function (rest) {
    return function (event) {
        return function (v) {
            return "##teamcity[" + (event + (property("name")(v.name) + (property("nodeId")(v.nodeId) + (property("parentNodeId")(Data_Maybe.fromMaybe("0")(v.parentNodeId)) + (rest + "]")))));
        };
    };
};
var teamcity = /* #__PURE__ */ teamcity$prime("");
var testFinished = /* #__PURE__ */ teamcity$prime("")("testFinished");
var testIgnored = /* #__PURE__ */ teamcity$prime("")("testIgnored");
var testStarted = /* #__PURE__ */ teamcity$prime("")("testStarted");
var testSuiteFinished = /* #__PURE__ */ teamcity$prime("")("testSuiteFinished");
var testSuiteStarted = /* #__PURE__ */ teamcity$prime("")("testSuiteStarted");
var testFailed = function (d) {
    return function (e) {
        var message = Effect_Exception.message(e);
        var isEquals = Data_String_CodeUnits.contains("\u2260")(message);
        if (isEquals) {
            var readString = function (string) {
                return Data_String_CodeUnits.dropRight(1)(Data_String_CodeUnits.drop(1)(Data_String_Common.replaceAll("\\n")("\x0a")(string)));
            };
            var read = function (s) {
                var $53 = Data_String_CodeUnits.take(1)(s) === "\"";
                if ($53) {
                    return readString(s);
                };
                return s;
            };
            var expected = read(Data_String_CodeUnits.dropRight(1)(Data_String_CodeUnits.takeWhile(function (v) {
                return v !== "\u2260";
            })(message)));
            var actual = read(Data_String_Common.replaceAll("\\n")("\x0a")(Data_String_CodeUnits.drop(2)(Data_String_CodeUnits.dropWhile(function (v) {
                return v !== "\u2260";
            })(message))));
            return teamcity$prime(property("type")("comparisonFailure") + (property("details")(Data_Maybe.fromMaybe("")(Effect_Exception.stack(e))) + (property("message")(message) + (property("expected")(expected) + property("actual")(actual)))))("testFailed")(d);
        };
        return teamcity$prime(property("message")(d.message))("testFailed")(d);
    };
};
var testFinishedIn = function (d) {
    return teamcity$prime(property("duration")(show(Data_Int.trunc(d.duration))))("testFinished")(d);
};
var teamcityReporter = /* #__PURE__ */ Test_Spec_Reporter_Base.defaultReporter(Data_Unit.unit)(function (v) {
    if (v instanceof Test_Spec_Runner_Event.Suite) {
        return tellLn(testSuiteStarted(serviceMessage(v.value1)));
    };
    if (v instanceof Test_Spec_Runner_Event.SuiteEnd) {
        return tellLn(testSuiteFinished(serviceMessage(v.value0)));
    };
    if (v instanceof Test_Spec_Runner_Event.Test) {
        return tellLn(testStarted(serviceMessage(v.value1)));
    };
    if (v instanceof Test_Spec_Runner_Event.Pending) {
        var attributes = serviceMessage(v.value0);
        return discard(tellLn(testStarted(attributes)))(function () {
            return discard(tellLn(testIgnored(attributes)))(function () {
                return tellLn(testFinished(attributes));
            });
        });
    };
    if (v instanceof Test_Spec_Runner_Event.TestEnd && v.value1 instanceof Test_Spec_Result.Success) {
        return tellLn(testFinishedIn(withDuration(v.value1.value1)(serviceMessage(v.value0))));
    };
    if (v instanceof Test_Spec_Runner_Event.TestEnd && v.value1 instanceof Test_Spec_Result.Failure) {
        var attributes = withMessage(show1(v.value1.value0))(serviceMessage(v.value0));
        return discard(tellLn(testFailed(attributes)(v.value1.value0)))(function () {
            return tellLn(testFinished(attributes));
        });
    };
    if (v instanceof Test_Spec_Runner_Event.End) {
        return pure(Data_Unit.unit);
    };
    if (v instanceof Test_Spec_Runner_Event.Start) {
        return tellLn(testCount(v.value0));
    };
    throw new Error("Failed pattern match at Test.Spec.Reporter.TeamCity (line 151, column 41 - line 173, column 48): " + [ v.constructor.name ]);
});
export {
    teamcityReporter,
    teamcity
};
