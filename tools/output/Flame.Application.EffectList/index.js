// Generated by purs version 0.15.15
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Flame_Application_Internal_Dom from "../Flame.Application.Internal.Dom/index.js";
import * as Flame_Application_Internal_PreMount from "../Flame.Application.Internal.PreMount/index.js";
import * as Flame_Internal_Equality from "../Flame.Internal.Equality/index.js";
import * as Flame_Renderer_Internal_Dom from "../Flame.Renderer.Internal.Dom/index.js";
import * as Flame_Subscription_Internal_Listener from "../Flame.Subscription.Internal.Listener/index.js";
var when = /* #__PURE__ */ Control_Applicative.when(Effect.applicativeEffect);
var for_ = /* #__PURE__ */ Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var traverse_ = /* #__PURE__ */ Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray);
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var showId = function (dictShow) {
    var show = Data_Show.show(dictShow);
    return function (v) {
        return show(v);
    };
};
var run = function (parent) {
    return function (isResumed) {
        return function (appId) {
            return function (v) {
                return function __do() {
                    var modelState = Effect_Ref["new"](v.init.value0)();
                    var renderingState = Effect_Ref["new"](21)();
                    var render = function (model) {
                        return function __do() {
                            var rendering = Effect_Ref.read(renderingState)();
                            Flame_Renderer_Internal_Dom.resume(rendering)(v.view(model))();
                            return Effect_Ref.write(model)(modelState)();
                        };
                    };
                    var runUpdate = function (message) {
                        return function __do() {
                            var currentModel = Effect_Ref.read(modelState)();
                            var v1 = v.update(currentModel)(message);
                            when(Flame_Internal_Equality.modelHasChanged(currentModel)(v1.value0))(render(v1.value0))();
                            return runMessages(v1.value1)();
                        };
                    };
                    var runMessages = function (affs) {
                        return for_(affs)(Effect_Aff.runAff_(function (v1) {
                            if (v1 instanceof Data_Either.Left) {
                                return Effect_Console.log(Effect_Exception.message(v1.value0));
                            };
                            if (v1 instanceof Data_Either.Right && v1.value0 instanceof Data_Maybe.Just) {
                                return runUpdate(v1.value0.value0);
                            };
                            return pure(Data_Unit.unit);
                        }));
                    };
                    var rendering = (function () {
                        if (isResumed) {
                            return Flame_Renderer_Internal_Dom.startFrom(parent)(runUpdate)(v.view(v.init.value0))();
                        };
                        return Flame_Renderer_Internal_Dom.start(parent)(runUpdate)(v.view(v.init.value0))();
                    })();
                    Effect_Ref.write(rendering)(renderingState)();
                    runMessages(v.init.value1)();
                    (function () {
                        if (appId instanceof Data_Maybe.Nothing) {
                            return Data_Unit.unit;
                        };
                        if (appId instanceof Data_Maybe.Just) {
                            return Flame_Subscription_Internal_Listener.createMessageListener(appId.value0)(runUpdate)();
                        };
                        throw new Error("Failed pattern match at Flame.Application.EffectList (line 142, column 7 - line 144, column 62): " + [ appId.constructor.name ]);
                    })();
                    return traverse_(Flame_Subscription_Internal_Listener.createSubscription(runUpdate))(v.subscribe)();
                };
            };
        };
    };
};
var resumeMountWith = function (dictUnserializeState) {
    var serializedState = Flame_Application_Internal_PreMount.serializedState(dictUnserializeState);
    return function (dictShow) {
        var showId1 = showId(dictShow);
        return function (v) {
            return function (appId) {
                return function (v1) {
                    return function __do() {
                        var initialModel = serializedState(v)();
                        var maybeElement = Flame_Application_Internal_Dom.querySelector(v)();
                        if (maybeElement instanceof Data_Maybe.Just) {
                            return run(maybeElement.value0)(true)(map(showId1)(appId))({
                                init: new Data_Tuple.Tuple(initialModel, v1.init),
                                view: v1.view,
                                update: v1.update,
                                subscribe: v1.subscribe
                            })();
                        };
                        if (maybeElement instanceof Data_Maybe.Nothing) {
                            return Effect_Exception["throw"]("Error resuming application mount: no element matching selector " + (v + " found!"))();
                        };
                        throw new Error("Failed pattern match at Flame.Application.EffectList (line 81, column 7 - line 88, column 124): " + [ maybeElement.constructor.name ]);
                    };
                };
            };
        };
    };
};
var resumeMount = function (dictUnserializeState) {
    var resumeMountWith1 = resumeMountWith(dictUnserializeState);
    return function (dictShow) {
        var resumeMountWith2 = resumeMountWith1(dictShow);
        return function (selector) {
            return function (appId) {
                return resumeMountWith2(selector)(new Data_Maybe.Just(appId));
            };
        };
    };
};
var noMessages = function (model) {
    return new Data_Tuple.Tuple(model, [  ]);
};
var noAppId = /* #__PURE__ */ (function () {
    return Data_Maybe.Nothing.value;
})();
var resumeMount_ = function (dictUnserializeState) {
    var resumeMountWith1 = resumeMountWith(dictUnserializeState)(Data_Show.showUnit);
    return function (selector) {
        return resumeMountWith1(selector)(noAppId);
    };
};
var mountWith = function (dictShow) {
    var showId1 = showId(dictShow);
    return function (v) {
        return function (appId) {
            return function (application) {
                return function __do() {
                    var maybeElement = Flame_Application_Internal_Dom.querySelector(v)();
                    if (maybeElement instanceof Data_Maybe.Just) {
                        return run(maybeElement.value0)(false)(map(showId1)(appId))(application)();
                    };
                    if (maybeElement instanceof Data_Maybe.Nothing) {
                        return Effect_Exception["throw"]("Error mounting application")();
                    };
                    throw new Error("Failed pattern match at Flame.Application.EffectList (line 101, column 7 - line 103, column 62): " + [ maybeElement.constructor.name ]);
                };
            };
        };
    };
};
var mountWith1 = /* #__PURE__ */ mountWith(Data_Show.showUnit);
var mount_ = function (selector) {
    return mountWith1(selector)(noAppId);
};
var mount = function (dictShow) {
    var mountWith2 = mountWith(dictShow);
    return function (selector) {
        return function (appId) {
            return mountWith2(selector)(new Data_Maybe.Just(appId));
        };
    };
};
export {
    noMessages,
    mount,
    mount_,
    resumeMount,
    resumeMount_
};
