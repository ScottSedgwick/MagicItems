// Generated by purs version 0.15.15
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Flame_Application_EffectList from "../Flame.Application.EffectList/index.js";
var toResumedApplication = function (v) {
    return {
        init: [  ],
        update: function (model) {
            return function (message) {
                return new Data_Tuple.Tuple(v.update(model)(message), [  ]);
            };
        },
        view: v.view,
        subscribe: v.subscribe
    };
};
var resumeMount_ = function (dictUnserializeState) {
    var resumeMount_1 = Flame_Application_EffectList.resumeMount_(dictUnserializeState);
    return function (selector) {
        var $16 = resumeMount_1(selector);
        return function ($17) {
            return $16(toResumedApplication($17));
        };
    };
};
var resumeMount = function (dictUnserializeState) {
    var resumeMount1 = Flame_Application_EffectList.resumeMount(dictUnserializeState);
    return function (dictShow) {
        var resumeMount2 = resumeMount1(dictShow);
        return function (selector) {
            return function (appId) {
                var $18 = resumeMount2(selector)(appId);
                return function ($19) {
                    return $18(toResumedApplication($19));
                };
            };
        };
    };
};
var mount_ = function (selector) {
    return function (application) {
        return Flame_Application_EffectList.mount_(selector)({
            view: application.view,
            subscribe: application.subscribe,
            init: new Data_Tuple.Tuple(application.init, [  ]),
            update: function (model) {
                return function (message) {
                    return new Data_Tuple.Tuple(application.update(model)(message), [  ]);
                };
            }
        });
    };
};
var mount = function (dictShow) {
    var mount1 = Flame_Application_EffectList.mount(dictShow);
    return function (selector) {
        return function (appId) {
            return function (application) {
                return mount1(selector)(appId)({
                    view: application.view,
                    subscribe: application.subscribe,
                    init: new Data_Tuple.Tuple(application.init, [  ]),
                    update: function (model) {
                        return function (message) {
                            return new Data_Tuple.Tuple(application.update(model)(message), [  ]);
                        };
                    }
                });
            };
        };
    };
};
export {
    mount,
    mount_,
    resumeMount,
    resumeMount_
};
